{"version":3,"file":"static/preview.2d89fb90b4ecaba7fd5d.bundle.js","sources":["webpack:///./src/components/_untils/index.ts"],"sourcesContent":["import { ComponentType } from 'react'\n\nexport const isFunction = <T extends Function>(value: any): value is T => typeof value === 'function'\n\nexport const getId = (length: number): string => {\n    return Number(\n        Math.random()\n            .toString()\n            .substr(3, length) + Date.now()\n    ).toString(36)\n}\n\nexport const getComponentName = (component: ComponentType<any>) => component.displayName || (component as any).name\n\nexport const withDefaultProps = <P extends object, DP extends Partial<P> = Partial<P>>(\n    defaultProps: DP,\n    Cmp: ComponentType<P>\n) => {\n    // we are extracting props that need to be required\n    type RequiredProps = Omit<P, keyof DP>\n    // we are re-creating our props definition by creating and intersection type\n    // between all original props mapped to be optional and required to be required\n    type Props = Partial<DP> & Required<RequiredProps>\n\n    // here we set our defaultProps\n    Cmp.defaultProps = defaultProps\n\n    // we override return type definition by turning type checker off\n    // for original props  and setting the correct return type\n    return (Cmp as ComponentType<any>) as ComponentType<Props>\n}\n"],"mappings":"AAEA","sourceRoot":""}