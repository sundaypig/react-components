{"version":3,"file":"static/preview.a257cbee336264316051.bundle.js","sources":["webpack:///./src/components/DrawingBoard/index.tsx"],"sourcesContent":["import React, { PureComponent, createRef, MouseEvent, CSSProperties } from 'react'\n\nimport { isFunction, dataURItoBlob } from '../_untils'\n\ntype DrawingBoardRenderProps = {\n    save: () => void\n    clear: () => void\n    drawingBoard: JSX.Element\n}\n\ntype DrawingBoardProps = {\n    width?: number\n    height?: number\n    color?: string\n    lineWidth?: number\n    onSave?: (blob: Blob) => void\n    children(props: DrawingBoardRenderProps): JSX.Element\n}\n\nconst canvasStyle: CSSProperties = {\n    display: 'block'\n}\n\nclass DrawingBoard extends PureComponent<DrawingBoardProps> {\n    static defaultProps = {\n        width: 300,\n        height: 300,\n        lineWidth: 3,\n        color: '#000'\n    }\n\n    private originX = 0\n    private originY = 0\n    private canDraw = false\n    private canvas = createRef<HTMLCanvasElement>()\n    private ctx: CanvasRenderingContext2D\n\n    componentDidMount() {\n        if (!this.canvas.current) {\n            return\n        }\n        this.ctx = this.canvas.current.getContext('2d')!\n    }\n\n    private save = (): void => {\n        const { onSave } = this.props\n        if (!this.canvas.current) {\n            return\n        }\n        if (onSave === undefined) {\n            return\n        }\n        const dataURL = this.canvas.current!.toDataURL('image/jpeg')\n        onSave(dataURItoBlob(dataURL))\n    }\n\n    private clear = (): void => {\n        const { width, height } = this.props\n        this.ctx.clearRect(0, 0, width!, height!)\n    }\n\n    private handleMousedown = (event: MouseEvent<HTMLCanvasElement>) => {\n        const ctx = this.ctx\n        const canvas = this.canvas.current!\n        this.canDraw = true\n        this.originX = event.clientX - canvas.offsetLeft\n        this.originY = event.clientY - canvas.offsetTop\n        ctx.strokeStyle = this.props.color!\n        ctx.lineWidth = this.props.lineWidth!\n        ctx.moveTo(this.originX, this.originY)\n        ctx.beginPath()\n    }\n\n    private handleMousemove = (event: MouseEvent<HTMLCanvasElement>) => {\n        if (!this.canDraw) {\n            return\n        }\n        const canvas = this.canvas.current!\n        const ctx = this.ctx\n        const x = event.clientX - canvas.offsetLeft\n        const y = event.clientY - canvas.offsetTop\n        ctx.lineTo(x, y)\n        ctx.stroke()\n    }\n\n    private stopDraw = () => {\n        if (this.canDraw) {\n            const ctx = this.ctx\n            ctx.closePath()\n            this.canDraw = false\n        }\n    }\n\n    render() {\n        const { children, width, height } = this.props\n        const drawingBoard = (\n            <canvas\n                onMouseDown={this.handleMousedown}\n                onMouseUp={this.stopDraw}\n                onMouseLeave={this.stopDraw}\n                onMouseMove={this.handleMousemove}\n                width={width}\n                height={height}\n                ref={this.canvas}\n                style={canvasStyle}\n            />\n        )\n        return isFunction(children) ? children({ save: this.save, drawingBoard, clear: this.clear }) : null\n    }\n}\n\nexport default DrawingBoard\n"],"mappings":"AAmBA","sourceRoot":""}